--|| Services ||--
local ReplicatedStorage = game:GetService("ReplicatedStorage") -- Core Roblox data replication service

--|| Folders ||--
local remotes = ReplicatedStorage.Remotes -- Network communication handlers
local modules = ReplicatedStorage.Modules -- Reusable code components

--|| Modules ||--
local loopsModule = require(modules.Loops) -- Frame-based loop management system

--|| Projectile Configuration ||--
local gameFPS = 60 -- Base simulation frequency (frames per second)
local oneFrame = 1/gameFPS -- Time duration of single frame (0.016667s)

-- Environment collision detection parameters (walls, floors)
local mapParams = OverlapParams.new()
mapParams.FilterType = Enum.RaycastFilterType.Include -- Only include specified objects
mapParams.FilterDescendantsInstances = {workspace.Map} -- World geometry container

-- Character collision detection parameters
local combinedParams = OverlapParams.new()
combinedParams.FilterType = Enum.RaycastFilterType.Include
combinedParams.FilterDescendantsInstances = {workspace.Living} -- Active game characters

--|| Module Setup ||--
local module = {} -- Projectile system container
module.__index = module -- Enable OOP metatable functionality

--|| Type Definitions ||--
export type newData = {
	Velocity: Vector3 | (first: boolean?) -> Vector3, -- Initial movement vector or dynamic calculator
	RotationOffset: CFrame?, -- Visual orientation adjustment
	lastTime: number?, -- Maximum lifespan in seconds
	hitboxSize: Vector3, -- Collision detection dimensions
	multiHit: boolean?, -- Allow multiple target impacts
	ignoreWalls: boolean?, -- Phase through environment
	hitboxOffset: CFrame?, -- Collision box position offset
	DestroyOnHit: boolean?, -- Auto-remove on collision
	OneTarget: (boolean | Model)?, -- Specific target restriction
	FPS: number? -- Custom update frequency
}

export type data = {
	Velocity: Vector3 | () -> Vector3, -- Current movement vector
	velocityFunction: ((first: boolean?) -> Vector3)?, -- Dynamic velocity calculator
	despawnFunction: ((projectile: Model, hitSomething: boolean?, hitMap: boolean?) -> nil)?, -- Custom cleanup handler
	RotationOffset: CFrame?, -- Model rotation adjustment
	hitboxPart: BasePart?, -- Invisible collision detector
	hitboxOffset: CFrame?, -- Hitbox positional offset
	hitFunction: (hitCharacter: Model) -> boolean?, -- Impact effect handler
	model: Model | BasePart, -- Visual representation
	lastTime: number, -- Total allowed lifespan
	removing: boolean?, -- Destruction flag
	alreadyHit: {Model?}, -- Previously impacted targets
	multiHit: boolean?, -- Multi-target permission
	oneTarget: (boolean | Model)?, -- Target restriction
	timePassed: number, -- Active lifetime counter
	ignoreWalls: boolean?, -- Environment collision bypass
	destroyOnHit: boolean, -- Auto-destruct on impact
	hitboxId: number, -- Unique collision identifier
	owner: Model -- Projectile source character
}

local Projectiles = {} -- Active projectile registry table

--|| Helper Functions ||--
local function isModelIgnored(model, ignoreList)
	-- Check if model should be excluded from collision checks
	if table.find(ignoreList, model) then return true end -- Direct match
	for _, ignored in ignoreList do -- Ancestry check
		if model:IsDescendantOf(ignored) then return true end
	end
	return false
end

local function handleExpiredProjectile(projectileData)
	-- Cleanup expired projectile components
	projectileData.hitboxPart:Destroy() -- Remove collision detector

	-- Standard destruction without callback
	if not projectileData.despawnFunction then
		projectileData.model:Destroy()
		return false -- Signal for removal
	end

	-- Async callback execution
	projectileData.removing = true -- Mark for destruction
	task.spawn(function()
		projectileData.despawnFunction(projectileData.model, false) -- No hit occurred
		projectileData.model:Destroy()
	end)
	return false
end

local function processCharacterHit(projectileData, character)
	-- Validate target against impact criteria
	if typeof(projectileData.oneTarget) == "Instance" and character ~= projectileData.oneTarget then return false end -- Wrong specific target

	-- Single-target restriction check
	if typeof(projectileData.oneTarget) == "boolean" and projectileData.alreadyHit[1] then return false end -- Already hit single target

	-- Duplicate hit prevention
	if table.find(projectileData.alreadyHit, character) then return false end -- Already registered target

	-- Register hit and execute impact effects
	table.insert(projectileData.alreadyHit, character)
	return projectileData.hitFunction(character, true) -- Return success status
end

local function updatePosition(projectileData, deltaTime)
	-- Calculate new position using velocity
	local velocity = projectileData.Velocity
	local model = projectileData.model
	local currentCFrame = model:IsA("Model") and model:GetPivot() or model.CFrame
	local nextCFrame = currentCFrame + (velocity * deltaTime) -- Position integration

	-- Update visual representation if not frozen
	if not model:GetAttribute("forceProjectileStop") then
		if model:IsA("Model") then
			model:PivotTo(nextCFrame) -- Position Model
		else
			model.CFrame = nextCFrame -- Position Single part
		end
	end
end

--|| Main Functions ||--
local function checkHitbox(PartsHit, IgnoreList, CombatInfo)
	-- Process collision results into valid targets
	local CharactersHit = {} -- Valid character impacts
	local Checked = {} -- Processed models
	local IgnoreDestructibles = not (CombatInfo and CombatInfo.Damage) -- Environmental damage flag

	for _, Part in PartsHit do
		local Model = Part:FindFirstAncestorOfClass("Model")
		if not Model or table.find(Checked, Model) then continue end

		-- Skip ignored models
		if isModelIgnored(Model, IgnoreList) then 
			table.insert(Checked, Model) 
			continue 
		end

		-- Character impact detection
		local Humanoid = Model:FindFirstChild("Humanoid")
		if Humanoid then
			table.insert(Checked, Model)
			if Humanoid.Health > 0 and Model:FindFirstAncestor("Living") then
				table.insert(CharactersHit, Model) -- Living valid target
			end
			continue
		end

		-- Skip destructible objects when not dealing damage
		if IgnoreDestructibles then continue end
	end

	return CharactersHit
end

local function updateProjectile(deltaTime, projectileData)
	-- Main projectile simulation loop

	-- Lifespan expiration check
	if (projectileData.timePassed >= projectileData.lastTime or projectileData.model:GetAttribute("Stop")) and not projectileData.removing then return handleExpiredProjectile(projectileData) end

	-- Update velocity from dynamic function
	if projectileData.velocityFunction then
		projectileData.Velocity = projectileData.velocityFunction(false, oneFrame)
	end

	-- Synchronize hitbox with visual model
	local model = projectileData.model
	local projectileCFrame = model:IsA("Model") and model:GetPivot() or model.CFrame
	projectileData.hitboxPart.CFrame = projectileCFrame

	-- Skip processing if marked for removal
	if projectileData.removing then return true end

	-- Detect character collisions
	local charactersHit = checkHitbox(workspace:GetPartBoundsInBox(projectileCFrame * projectileData.hitboxOffset, projectileData.hitboxPart.Size, combinedParams), {projectileData.owner})

	-- Process character impacts
	local hit = false
	for _, v in charactersHit do
		if processCharacterHit(projectileData, v) then
			hit = true -- Successful hit registration
		end
	end

	-- Environment collision detection
	local hitWall = false
	if not hit then
		local partsHit = workspace:GetPartsInPart(projectileData.hitboxPart, mapParams)
		hitWall = partsHit[1] and partsHit[1].CanCollide -- Solid surface check
	end

	-- Collision response handling
	if hit or (hitWall and not projectileData.ignoreWalls) then
		projectileData.Velocity = Vector3.zero -- Stop movement
		projectileData.hitboxPart:Destroy() -- Remove collision
		projectileData.removing = true -- Mark for cleanup

		-- Custom despawn handling
		if projectileData.despawnFunction then
			task.spawn(function()
				projectileData.despawnFunction(model, hit, hitWall)
				if projectileData.destroyOnHit then model:Destroy() end
			end)
			return false
		end

		-- Immediate destruction
		if projectileData.destroyOnHit then model:Destroy() end
		return false
	end

	-- Position update and lifetime tracking
	updatePosition(projectileData, deltaTime)
	projectileData.timePassed += deltaTime
	return true
end

--|| Public API ||--
function module.new(owner, projectileModelorPart, from, data, hitFunction, despawnFunction)
	-- Create new projectile instance
	local projectileId = math.random() -- Unique identifier
	local model = projectileModelorPart -- Visual representation
	local projectileData = {
		Velocity = if type(data.Velocity) == "vector" then data.Velocity else Vector3.zAxis,
		velocityFunction = type(data.Velocity) == "function" and data.Velocity or nil,
		hitboxPart = nil,
		hitboxOffset = data.hitboxOffset or CFrame.new(),
		despawnFunction = despawnFunction,
		RotationOffset = data.RotationOffset or CFrame.new(),
		owner = owner,
		projectileId = projectileId,
		hitFunction = hitFunction,
		model = model,
		multiHit = data.multiHit,
		oneTarget = data.OneTarget,
		alreadyHit = {},
		lastTime = data.lastTime or 2, -- Default 2-second lifespan
		timePassed = 0,
		ignoreWalls = data.ignoreWalls or false,
		destroyOnHit = data.DestroyOnHit,
		hitboxId = math.random()
	}

	-- Initialize velocity from function
	if projectileData.velocityFunction then
		projectileData.Velocity = projectileData.velocityFunction(true, oneFrame)
	end

	-- Owner destruction cleanup
	local desctructionConnect; desctructionConnect = owner.AncestryChanged:Connect(function(_, parent)
		if parent then return end -- Only trigger on actual deletion
		model:Destroy()
		desctructionConnect:Disconnect()
	end)

	-- Position projectile model
	local lookAt = CFrame.lookAt(from, from + projectileData.Velocity) * projectileData.RotationOffset
	if model:IsA("Model") then
		model:PivotTo(lookAt) -- Position model assembly
	else
		model.CFrame = lookAt -- Position single part
	end
	model.Parent = workspace.Projectiles -- Add to game world

	-- Create collision detection part
	local hitboxPart = Instance.new("Part")
	hitboxPart.Size = data.hitboxSize or Vector3.one
	hitboxPart.CFrame = lookAt
	hitboxPart.Transparency = 1 -- Invisible collision
	hitboxPart.CanCollide = false -- Prevent physics interactions
	hitboxPart.Anchored = true -- Manual positioning
	projectileData.hitboxPart = hitboxPart
	Projectiles[model] = projectileData -- Register projectile

	-- Start update loop
	local loop = loopsModule.new(function(loopSelf, deltaTime)
		if not updateProjectile(deltaTime, projectileData) then
			loopSelf:Break() -- Stop loop on false return
		end
	end, data.FPS or 60) -- Use custom FPS or default 60

	-- Control interface
	local self = {}
	function self:Destroy()
		hitboxPart:Destroy()
		loop:Break() -- Stop update loop
		model:Destroy()
		desctructionConnect:Disconnect()
		Projectiles[model] = nil -- Deregister
	end

	return self
end

function module.GetProjectileFromModel(Model)
	-- Retrieve projectile data by visual model reference
	return Projectiles[Model]
end

return module
